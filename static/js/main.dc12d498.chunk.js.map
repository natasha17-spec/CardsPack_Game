{"version":3,"sources":["main/auth/registration/Registration.module.css","main/ui/common/Input/Input.module.css","main/ui/common/Button/Button.module.css","main/features/test/Test.module.css","main/ui/components/Main.module.css","main/ui/components/header/Header.module.css","main/auth/login/Login.module.css","main/auth/restorePsw/RestorePsw.module.css","main/auth/newPsw/NewPsw.module.css","main/auth/profile/Profile.module.css","main/ui/common/Link/Link.module.css","main/ui/components/header/Header.tsx","main/auth/login/Login.tsx","main/auth/restorePsw/RestorePsw.tsx","main/auth/newPsw/newPsw.tsx","main/auth/profile/Profile.tsx","main/dal/api.ts","main/auth/registration/registrationReducer.tsx","main/ui/common/Input/Input.tsx","main/ui/common/Button/Button.tsx","main/auth/registration/RegirtrationForm.tsx","main/auth/registration/Regirtration.tsx","main/auth/registration/registrationFormShema.ts","main/auth/registration/RegirtrationContainer.tsx","main/auth/registration/RegirtrationPage.tsx","main/ui/components/routes/Routes.tsx","main/ui/common/Link/Link.tsx","main/features/test/Test.tsx","main/ui/components/Main.tsx","main/auth/login/loginReducer.tsx","main/auth/restorePsw/restorePswReducer.tsx","main/auth/newPsw/newPswReducer.tsx","main/auth/profile/profileReducer.tsx","main/bll/store/store.ts","main/ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","styles","header","Login","login","RestorePsw","restorePsw","NewPsw","newPsw","Profile","profile","instance","axios","create","baseURL","api","email","password","post","initialState","isSuccess","errorServerMessage","isFetching","actions","type","Input","name","register","props","classForEl","errors","input","error","ref","errorMessage","message","Button","button","buttonTitle","tittle","RegistrationForm","onSubmit","registration__form","placeholder","registration__form_button","Registration","registration","registration__form_errorMessage","registrationFormSchema","yup","shape","required","min","passwordConfirmation","oneOf","undefined","RegistrationContainer","useSelector","state","dispatch","useDispatch","useForm","mode","validationSchema","handleSubmit","reset","data","a","result","console","log","success","response","to","LOGIN_PATH","RegistrationPage","REGISTRATION_PATH","RESTORE_PSW_PATH","NEW_PSW_PATH","PROFILE_PATH","Routs","path","render","Link","activeClassName","active","title","Test","links","map","l","key","test","Main","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","unregister","catch"],"mappings":"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","file":"static/js/main.dc12d498.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"registration\":\"Registration_registration__s9QAt\",\"registration__form\":\"Registration_registration__form__T7uRR Registration_registration__s9QAt\",\"registration__form_errorMessage\":\"Registration_registration__form_errorMessage__2sn_e\",\"registration__form_button\":\"Registration_registration__form_button__jk4yV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__PjJpN\",\"error\":\"Input_error__1V4z7\",\"errorMessage\":\"Input_errorMessage__3Yjh0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__8_dvB\",\"buttonTitle\":\"Button_buttonTitle__37DFa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"Test_test__2_mrJ\",\"links\":\"Test_links__1AIGB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__XAxiK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2shZ-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__25czE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"restorePsw\":\"RestorePsw_restorePsw__gqnRE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPsw\":\"NewPsw_newPsw__2xCNg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3SUdA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Link_active__3EZTi\"};","import React from 'react';\r\nimport styles from './Header.module.css'\r\n\r\nconst Header = () => {\r\n\r\n  return <div className={styles.header}>\r\n    header\r\n  </div>\r\n}\r\nexport default Header","import React from 'react';\r\nimport styles from './Login.module.css'\r\n\r\nconst Login = () => {\r\n\r\n  return  <div className={styles.login}>\r\nLOGIN\r\n  </div>\r\n}\r\nexport default Login\r\n","import React from 'react';\r\nimport styles from './RestorePsw.module.css'\r\n\r\nconst RestorePsw = () => {\r\n\r\n  return  <div className={styles.restorePsw}>\r\nRESTORE PSW\r\n  </div>\r\n}\r\nexport default RestorePsw\r\n","import React from 'react';\r\nimport styles from './NewPsw.module.css'\r\n\r\nconst NewPsw = () => {\r\n\r\n  return  <div className={styles.newPsw}>\r\nNEW PSW\r\n  </div>\r\n}\r\nexport default NewPsw\r\n","import React from 'react';\r\nimport styles from './Profile.module.css'\r\n\r\nconst Profile = () => {\r\n\r\n  return  <div className={styles.profile}>\r\nPROFILE\r\n  </div>\r\n}\r\nexport default Profile\r\n","import axios from 'axios'\r\nimport {UserType} from \"../types/entities\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://cards-nya-back.herokuapp.com/1.0\",\r\n})\r\n\r\ntype GetUsersType = {\r\n  users: Array<UserType>\r\n  maxPublicCardPacksCount: number\r\n  minPublicCardPacksCount: number\r\n  page: number\r\n  pageCount: number\r\n  token: string\r\n  tokenDeathTime: number\r\n  usersTotalCount: number\r\n}\r\ntype LoginType = {\r\n  email: string\r\n  name: string\r\n  isAdmin: boolean,\r\n  rememberMe: boolean,\r\n  token: string\r\n  tokenDeathTime: number\r\n  __v: number\r\n  _id: string\r\n  success: boolean\r\n}\r\ntype RegistrationType = {\r\n  addedUser: {\r\n    email: string\r\n    isAdmin: boolean,\r\n    __v: number,\r\n    _id: string\r\n  },\r\n  success: boolean\r\n}\r\ntype UpdateNameType = {\r\n  success: boolean\r\n  token: string\r\n  tokenDeathTime: number\r\n  updatedUser: UserType\r\n}\r\n\r\nexport const api = {\r\n  getUsers(token: string) {\r\n    return instance.get<GetUsersType>(\r\n      `/social/users&token=${token}`\r\n    )\r\n  },\r\n  login(email: string, password: string, rememberMe: boolean) {\r\n    return instance.post<LoginType>(\r\n      `/auth/login`,\r\n      {\r\n        email,\r\n        password,\r\n        rememberMe\r\n      })\r\n  },\r\n  registration(email: string, password: string) {\r\n    return instance.post<RegistrationType>(\r\n      `/auth/register`,\r\n      {\r\n        email,\r\n        password\r\n      })\r\n  },\r\n  restorePsw(email: string, html1: string, html2: string) {\r\n    return instance.post<{ success: boolean }>(\r\n      ` /auth/forgot`,\r\n      {\r\n        email,\r\n        html1,\r\n        html2\r\n      })\r\n  },\r\n  authMe(token: string) {\r\n    return instance.post<LoginType>(\r\n      `/auth/me`,\r\n      {\r\n        token\r\n      })\r\n  },\r\n  setNewPsw(resetPasswordToken: string, password: string) {\r\n    return instance.post<{ success: boolean }>(\r\n      `/auth/set-new-password`,\r\n      {\r\n        resetPasswordToken,\r\n        password\r\n      })\r\n  },\r\n  updateName(token: string, name: string, avatar: string) {\r\n    return instance.put<UpdateNameType>(\r\n      `/auth/me`,\r\n      {\r\n        token,\r\n        name,\r\n        avatar\r\n      })\r\n  },\r\n}","import {AppStateType, InferActionTypes} from '../../bll/store/store';\r\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\nimport {api} from \"../../dal/api\";\r\n\r\nconst initialState = {\r\n  isSuccess: false,\r\n  errorServerMessage: '',\r\n  isFetching: false\r\n}\r\n\r\nexport const registrationReducer = (state: typeof initialState = initialState, action: ActionsType) => {\r\n  switch (action.type) {\r\n    case \"REGISTRATION_REDUCER/CREATE_USER_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        isSuccess: action.isSuccess,\r\n        errorServerMessage: action.errorServerMessage\r\n      }\r\n    case \"REGISTRATION_REDUCER/IS_FETCHING\":\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst actions = {\r\n  createUserSuccess: (isSuccess: boolean, errorServerMessage: string) => ({\r\n    type: 'REGISTRATION_REDUCER/CREATE_USER_SUCCESS',\r\n    isSuccess,\r\n    errorServerMessage\r\n  } as const),\r\n  setIsFetching: (isFetching: boolean) => ({\r\n    type: 'REGISTRATION_REDUCER/IS_FETCHING',\r\n    isFetching\r\n  } as const)\r\n}\r\ntype ActionsType = InferActionTypes<typeof actions>\r\n\r\n// thunks\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\r\ntype DispatchType = ThunkDispatch<AppStateType, unknown, ActionsType>\r\n\r\nexport const createUser = (email: string, password: string): ThunkType => async (dispatch: DispatchType) => {\r\n  try {\r\n    dispatch(actions.setIsFetching(true))\r\n    const result = await api.registration(email, password)\r\n    console.log(result)\r\n    dispatch(actions.createUserSuccess(result.data.success, ''))\r\n    dispatch(actions.setIsFetching(false))\r\n  } catch (e) {\r\n    dispatch(actions.createUserSuccess(false, e.response.data.error))\r\n    dispatch(actions.setIsFetching(false))\r\n    console.log({...e})\r\n  }\r\n}","import React from 'react';\r\nimport styles from './Input.module.css'\r\nimport {ErrorsType, RegisterType} from \"../../../auth/registration/RegirtrationContainer\";\r\n\r\ntype OwnPropsType = {\r\n  name: string\r\n  errors: ErrorsType\r\n  register: RegisterType\r\n}\r\ntype InputType = React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\ntype PropsType = OwnPropsType & InputType\r\nconst Input: React.FC<PropsType> = ({name, register, ...props}) => {\r\n  let classForEl = props.errors[name] ? `${styles.input} ${styles.error}` : styles.input\r\n  return (\r\n    <>\r\n      <input\r\n        {...props}\r\n        name={name}\r\n        ref={register}\r\n        className={classForEl}\r\n      />\r\n      {props.errors[name] && <span className={styles.errorMessage}>{props.errors[name].message}</span>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport styles from './Button.module.css'\r\n\r\ntype OwnPropsType = {\r\n  tittle: string\r\n}\r\ntype ButtonType = React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\ntype PropsType = OwnPropsType & ButtonType\r\nconst Button: React.FC<PropsType> = ({...props}) => {\r\n  return (\r\n    <button\r\n      className={styles.button}\r\n    >\r\n      <span\r\n        className={styles.buttonTitle}\r\n      >\r\n        {props.tittle}\r\n      </span>\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button","import React from 'react'\r\nimport styles from './Registration.module.css'\r\nimport Input from \"../../ui/common/Input/Input\"\r\nimport Button from \"../../ui/common/Button/Button\"\r\nimport {ErrorsType, RegisterType} from \"./RegirtrationContainer\";\r\n\r\n\r\ntype RegistrationPropsType = {\r\n  register: RegisterType\r\n  errors: ErrorsType\r\n  onSubmit: () => void\r\n}\r\n\r\nconst RegistrationForm: React.FC<RegistrationPropsType> = (props) => {\r\n  return <div>\r\n    <form onSubmit={props.onSubmit} className={styles.registration__form}>\r\n      <Input\r\n        name='email'\r\n        register={props.register}\r\n        errors={props.errors}\r\n        placeholder='email'\r\n      />\r\n      <Input\r\n        type='password'\r\n        name='password'\r\n        register={props.register}\r\n        errors={props.errors}\r\n        placeholder='password'\r\n      />\r\n      <Input\r\n        type='password'\r\n        name='passwordConfirmation'\r\n        register={props.register}\r\n        errors={props.errors}\r\n        placeholder='confirm password'\r\n      />\r\n      <div className={styles.registration__form_button}>\r\n        <Button tittle='sign up free'/>\r\n      </div>\r\n    </form>\r\n  </div>\r\n}\r\n\r\nexport default RegistrationForm\r\n","import React from 'react'\r\nimport styles from './Registration.module.css'\r\nimport {ErrorsType, RegisterType} from \"./RegirtrationContainer\";\r\nimport RegistrationForm from \"./RegirtrationForm\";\r\n\r\ntype RegistrationPropsType = {\r\n  errorServerMessage: string\r\n  register: RegisterType\r\n  errors: ErrorsType\r\n  isFetching: boolean\r\n  onSubmit: () => void\r\n}\r\n\r\nconst Registration: React.FC<RegistrationPropsType> = ({isFetching, errorServerMessage, ...props}) => {\r\n\r\n  return <div className={styles.registration}>\r\n    <RegistrationForm {...props}/>\r\n    {isFetching && <span>...LOADING</span>}\r\n    {errorServerMessage && <div className={styles.registration__form_errorMessage}>{errorServerMessage}</div>}\r\n  </div>\r\n}\r\n\r\nexport default Registration\r\n","import * as yup from \"yup\";\r\n\r\nexport const registrationFormSchema = yup.object().shape({\r\n  email: yup.string().required('⚠ please, fill up your email')\r\n    .email('⚠ please, fill up a valid email address'),\r\n  password: yup.string().required('⚠ please, fill up your password')\r\n    .min(8, `password has to be at least ${8} characters long.`),\r\n  passwordConfirmation: yup.string()\r\n    .oneOf([yup.ref('password'), undefined], 'password mismatch')\r\n})","import React from 'react';\r\nimport {useForm} from 'react-hook-form'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppStateType} from '../../bll/store/store'\r\nimport {createUser} from './registrationReducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {LOGIN_PATH} from '../../ui/components/routes/Routes'\r\nimport Registration from \"./Regirtration\"\r\nimport {registrationFormSchema} from './registrationFormShema'\r\n\r\ntype RegistrationFormDataType = {\r\n  email: string\r\n  password: string\r\n  passwordConfirmation: string\r\n}\r\nexport type RegisterType = ReturnType<typeof useForm>['register']\r\nexport type ErrorsType = ReturnType<typeof useForm>['errors']\r\n\r\nconst RegistrationContainer: React.FC = () => {\r\n  const {isSuccess, errorServerMessage, isFetching} = useSelector((state: AppStateType) => state.registration)\r\n  const dispatch = useDispatch()\r\n  const {register, handleSubmit, errors, reset} = useForm<RegistrationFormDataType>({\r\n    mode: 'onBlur',\r\n    validationSchema: registrationFormSchema\r\n  })\r\n  const onSubmit = handleSubmit((data) => {\r\n    dispatch(createUser(data.email, data.password))\r\n    reset()\r\n  })\r\n\r\n  if (isSuccess) return <Redirect to={LOGIN_PATH}/>\r\n  return <Registration\r\n    errorServerMessage={errorServerMessage}\r\n    register={register}\r\n    errors={errors}\r\n    onSubmit={onSubmit}\r\n    isFetching={isFetching}\r\n  />\r\n}\r\n\r\nexport default RegistrationContainer\r\n","import React from 'react'\r\nimport RegistrationContainer from \"./RegirtrationContainer\"\r\n\r\nconst RegistrationPage: React.FC = () => {\r\n  return <RegistrationContainer/>\r\n}\r\n\r\nexport default RegistrationPage\r\n","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport Login from \"../../../auth/login/Login\";\r\nimport Registration from \"../../../auth/registration/Regirtration\";\r\nimport RestorePsw from \"../../../auth/restorePsw/RestorePsw\";\r\nimport NewPsw from \"../../../auth/newPsw/newPsw\";\r\nimport Profile from \"../../../auth/profile/Profile\";\r\nimport RegistrationContainer from \"../../../auth/registration/RegirtrationContainer\";\r\nimport RegistrationPage from '../../../auth/registration/RegirtrationPage';\r\n\r\nexport const LOGIN_PATH = '/login'\r\nexport const REGISTRATION_PATH = '/registration'\r\nexport const RESTORE_PSW_PATH = '/restorePsw'\r\nexport const NEW_PSW_PATH = '/newPsw'\r\nexport const PROFILE_PATH = '/profile'\r\n\r\nconst Routs = () => {\r\n  return <div>\r\n    <Route path={LOGIN_PATH} render={() => <Login/>}/>\r\n    <Route path={REGISTRATION_PATH} render={() => <RegistrationPage/>}/>\r\n    <Route path={RESTORE_PSW_PATH} render={() => <RestorePsw/>}/>\r\n    <Route path={NEW_PSW_PATH} render={() => <NewPsw/>}/>\r\n    <Route path={PROFILE_PATH} render={() => <Profile/>}/>\r\n  </div>\r\n}\r\nexport default Routs","import React from 'react';\r\nimport styles from './Link.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype OwnPropsType = {\r\n  path: string\r\n  title: string\r\n}\r\n\r\nconst Link: React.FC<OwnPropsType> = (props) => {\r\n  return <NavLink\r\n    to={props.path}\r\n    activeClassName={styles.active}\r\n  >\r\n    {props.title}\r\n  </NavLink>\r\n}\r\n\r\nexport default Link\r\n","import React from 'react';\r\nimport styles from './Test.module.css'\r\nimport Link from '../../ui/common/Link/Link';\r\nimport {\r\n  LOGIN_PATH, NEW_PSW_PATH, PROFILE_PATH, REGISTRATION_PATH, RESTORE_PSW_PATH\r\n} from \"../../ui/components/routes/Routes\";\r\n\r\nconst Test = () => {\r\n  let links: Array<JSX.Element> = [\r\n    {title: 'login', path: LOGIN_PATH},\r\n    {title: 'registration', path: REGISTRATION_PATH},\r\n    {title: 'restore password', path: RESTORE_PSW_PATH},\r\n    {title: 'new password', path: NEW_PSW_PATH},\r\n    {title: 'profile', path: PROFILE_PATH},\r\n  ].map(l => <Link key={l.title} title={l.title} path={l.path}/>)\r\n\r\n  return <div className={styles.test}>\r\n    <h1>TEST</h1>\r\n    <div className={styles.links}>{links}</div>\r\n  </div>\r\n}\r\nexport default Test","import React from 'react';\r\nimport styles from './Main.module.css'\r\nimport Header from \"./header/Header\";\r\nimport Routs from \"./routes/Routes\";\r\nimport Test from \"../../features/test/Test\";\r\n\r\nconst Main = () => {\r\n  return <div className={styles.header}>\r\n    <Header/>\r\n    <Test/>\r\n    <Routs/>\r\n  </div>\r\n}\r\nexport default Main","import {AppStateType, InferActionTypes} from '../../bll/store/store';\r\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\n\r\nconst initialState = {}\r\n\r\nexport const loginReducer = (state: typeof initialState = initialState, action: ActionsType) => {\r\n  switch (action.type) {\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst actions = {\r\n  someAction: () => ({type: ''} as const)\r\n}\r\ntype ActionsType = InferActionTypes<typeof actions>\r\n\r\n// thunks\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\r\ntype DispatchType = ThunkDispatch<AppStateType, unknown, ActionsType>\r\n\r\nexport const someThunkCreator = (): ThunkType => async (dispatch: DispatchType, getState: () => AppStateType) => {\r\n  try {\r\n    dispatch(actions.someAction())\r\n  } catch (e) {\r\n    console.error('error: ' + {...e})\r\n  }\r\n}","import {AppStateType, InferActionTypes} from '../../bll/store/store';\r\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\n\r\nconst initialState = {}\r\n\r\nexport const restorePswReducer = (state: typeof initialState = initialState, action: ActionsType) => {\r\n  switch (action.type) {\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst actions = {\r\n  someAction: () => ({type: ''} as const)\r\n}\r\ntype ActionsType = InferActionTypes<typeof actions>\r\n\r\n// thunks\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\r\ntype DispatchType = ThunkDispatch<AppStateType, unknown, ActionsType>\r\n\r\nexport const someActionCreator = (): ThunkType => async (dispatch: DispatchType, getState: () => AppStateType) => {\r\n  try {\r\n    dispatch(actions.someAction())\r\n  } catch (e) {\r\n    console.error('error: ' + {...e})\r\n  }\r\n}","import {AppStateType, InferActionTypes} from '../../bll/store/store';\r\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\n\r\nconst initialState = {}\r\n\r\nexport const newPswReducer = (state: typeof initialState = initialState, action: ActionsType) => {\r\n  switch (action.type) {\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst actions = {\r\n  someAction: () => ({type: ''} as const)\r\n}\r\ntype ActionsType = InferActionTypes<typeof actions>\r\n\r\n// thunks\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\r\ntype DispatchType = ThunkDispatch<AppStateType, unknown, ActionsType>\r\n\r\nexport const someActionCreator = (): ThunkType => async (dispatch: DispatchType, getState: () => AppStateType) => {\r\n  try {\r\n    dispatch(actions.someAction())\r\n  } catch (e) {\r\n    console.error('error: ' + {...e})\r\n  }\r\n}","import {AppStateType, InferActionTypes} from '../../bll/store/store';\r\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\n\r\nconst initialState = {}\r\n\r\nexport const profileReducer = (state: typeof initialState = initialState, action: ActionsType) => {\r\n  switch (action.type) {\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst actions = {\r\n  someAction: () => ({type: ''} as const)\r\n}\r\ntype ActionsType = InferActionTypes<typeof actions>\r\n\r\n// thunks\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\r\ntype DispatchType = ThunkDispatch<AppStateType, unknown, ActionsType>\r\n\r\nexport const someActionCreator = (): ThunkType => async (dispatch: DispatchType, getState: () => AppStateType) => {\r\n  try {\r\n    dispatch(actions.someAction())\r\n  } catch (e) {\r\n    console.error('error: ' + {...e})\r\n  }\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunk from \"redux-thunk\";\r\nimport {loginReducer} from \"../../auth/login/loginReducer\";\r\nimport {registrationReducer} from \"../../auth/registration/registrationReducer\";\r\nimport {restorePswReducer} from \"../../auth/restorePsw/restorePswReducer\";\r\nimport {newPswReducer} from \"../../auth/newPsw/newPswReducer\";\r\nimport {profileReducer} from \"../../auth/profile/profileReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  login: loginReducer,\r\n  registration: registrationReducer,\r\n  restorePsw: restorePswReducer,\r\n  newPsw: newPswReducer,\r\n  profile: profileReducer,\r\n\r\n})\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport default store","import React from 'react';\r\nimport './App.css';\r\nimport Main from \"./components/Main\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"../bll/store/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Provider store={store}>\r\n        <HashRouter>\r\n          <Main/>\r\n        </HashRouter>\r\n      </Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './main/ui/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}